You can achieve this by creating a PHP script that executes the Python script when a button is clicked, reads its output, and then echoes it back. Here's a step-by-step guide on how to do this:

1. **Write the Python Script**: First, create your Python script that performs the desired functionality. For example, let's say you have a Python script named `script.py` that takes some input and prints an output.

   ```python
   # script.py
   # Example Python script

   # Input
   user_input = input("Enter something: ")

   # Process input
   processed_input = user_input.upper()

   # Output
   print("Processed input:", processed_input)
   ```

2. **Create the PHP Script**: Next, create a PHP script that will execute the Python script when a button is clicked and display the output. Let's name this PHP script `index.php`.

   ```php
   <!-- index.php -->
   <!DOCTYPE html>
   <html>
   <head>
       <title>Execute Python Script</title>
   </head>
   <body>
       <form method="post">
           <button type="submit" name="execute">Execute Python Script</button>
       </form>
       <?php
       if(isset($_POST['execute'])) {
           // Execute Python script
           $output = shell_exec('python script.py');
           // Display output
           echo "<pre>$output</pre>";
       }
       ?>
   </body>
   </html>
   ```

3. **Ensure Python Executable Path**: Make sure that the Python executable is in the system's PATH or specify the full path to the Python executable in the `shell_exec()` function if it's not.

4. **Set Appropriate Permissions**: Ensure that the PHP script has the necessary permissions to execute the Python script. This includes permissions for executing the Python interpreter and accessing any files the script may need.

5. **Testing**: Test your setup by accessing `index.php` in a web browser. When you click the "Execute Python Script" button, it should run the Python script and display its output on the web page.

This setup allows you to trigger the execution of a Python script from a PHP web page and display the output seamlessly. However, keep in mind that executing shell commands from PHP can pose security risks, especially if user input is involved. Always validate and sanitize user input to prevent any potential security vulnerabilities, such as command injection attacks.